# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class Brand(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, brand_id: str=None, brand_name: str=None, brand_description: str=None):  # noqa: E501
        """Brand - a model defined in Swagger

        :param brand_id: The brand_id of this Brand.  # noqa: E501
        :type brand_id: str
        :param brand_name: The brand_name of this Brand.  # noqa: E501
        :type brand_name: str
        :param brand_description: The brand_description of this Brand.  # noqa: E501
        :type brand_description: str
        """
        self.swagger_types = {
            'brand_id': str,
            'brand_name': str,
            'brand_description': str
        }

        self.attribute_map = {
            'brand_id': 'brandId',
            'brand_name': 'brandName',
            'brand_description': 'brandDescription'
        }
        self._brand_id = brand_id
        self._brand_name = brand_name
        self._brand_description = brand_description

    @classmethod
    def from_dict(cls, dikt) -> 'Brand':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Brand of this Brand.  # noqa: E501
        :rtype: Brand
        """
        return util.deserialize_model(dikt, cls)

    @property
    def brand_id(self) -> str:
        """Gets the brand_id of this Brand.

        Unique identifier for the brand  # noqa: E501

        :return: The brand_id of this Brand.
        :rtype: str
        """
        return self._brand_id

    @brand_id.setter
    def brand_id(self, brand_id: str):
        """Sets the brand_id of this Brand.

        Unique identifier for the brand  # noqa: E501

        :param brand_id: The brand_id of this Brand.
        :type brand_id: str
        """
        if brand_id is None:
            raise ValueError("Invalid value for `brand_id`, must not be `None`")  # noqa: E501

        self._brand_id = brand_id

    @property
    def brand_name(self) -> str:
        """Gets the brand_name of this Brand.

        Name of the brand  # noqa: E501

        :return: The brand_name of this Brand.
        :rtype: str
        """
        return self._brand_name

    @brand_name.setter
    def brand_name(self, brand_name: str):
        """Sets the brand_name of this Brand.

        Name of the brand  # noqa: E501

        :param brand_name: The brand_name of this Brand.
        :type brand_name: str
        """
        if brand_name is None:
            raise ValueError("Invalid value for `brand_name`, must not be `None`")  # noqa: E501

        self._brand_name = brand_name

    @property
    def brand_description(self) -> str:
        """Gets the brand_description of this Brand.

        Description of the brand  # noqa: E501

        :return: The brand_description of this Brand.
        :rtype: str
        """
        return self._brand_description

    @brand_description.setter
    def brand_description(self, brand_description: str):
        """Sets the brand_description of this Brand.

        Description of the brand  # noqa: E501

        :param brand_description: The brand_description of this Brand.
        :type brand_description: str
        """

        self._brand_description = brand_description
