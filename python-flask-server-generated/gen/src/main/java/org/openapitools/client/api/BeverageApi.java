/*
 * Beverage E-commerce API
 * API for managing beverages, labels, ingredients, container types, and unit measures in a beverage e-commerce platform.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.Beverage;
import org.openapitools.client.model.BeveragesBody;
import org.openapitools.client.model.BeveragesIdBody;
import org.openapitools.client.model.BeveragesIdBody1;
import org.openapitools.client.model.ErrorResponse;
import org.openapitools.client.model.InlineResponse200;
import java.util.UUID;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class BeverageApi {
    private ApiClient localVarApiClient;

    public BeverageApi() {
        this(Configuration.getDefaultApiClient());
    }

    public BeverageApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for createBeverage
     * @param beveragesBody  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Beverage created successfully. </td><td>  * Location - URL to the newly created container type. <br>  </td></tr>
        <tr><td> 400 </td><td> Invalid request. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failed. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Access forbidden. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createBeverageCall(BeveragesBody beveragesBody, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = beveragesBody;

        // create path and map variables
        String localVarPath = "/beverages";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "BearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createBeverageValidateBeforeCall(BeveragesBody beveragesBody, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'beveragesBody' is set
        if (beveragesBody == null) {
            throw new ApiException("Missing the required parameter 'beveragesBody' when calling createBeverage(Async)");
        }
        

        okhttp3.Call localVarCall = createBeverageCall(beveragesBody, _callback);
        return localVarCall;

    }

    /**
     * Create a new beverage
     * Creates a new beverage.
     * @param beveragesBody  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Beverage created successfully. </td><td>  * Location - URL to the newly created container type. <br>  </td></tr>
        <tr><td> 400 </td><td> Invalid request. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failed. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Access forbidden. </td><td>  -  </td></tr>
     </table>
     */
    public void createBeverage(BeveragesBody beveragesBody) throws ApiException {
        createBeverageWithHttpInfo(beveragesBody);
    }

    /**
     * Create a new beverage
     * Creates a new beverage.
     * @param beveragesBody  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Beverage created successfully. </td><td>  * Location - URL to the newly created container type. <br>  </td></tr>
        <tr><td> 400 </td><td> Invalid request. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failed. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Access forbidden. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> createBeverageWithHttpInfo(BeveragesBody beveragesBody) throws ApiException {
        okhttp3.Call localVarCall = createBeverageValidateBeforeCall(beveragesBody, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Create a new beverage (asynchronously)
     * Creates a new beverage.
     * @param beveragesBody  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Beverage created successfully. </td><td>  * Location - URL to the newly created container type. <br>  </td></tr>
        <tr><td> 400 </td><td> Invalid request. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failed. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Access forbidden. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createBeverageAsync(BeveragesBody beveragesBody, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = createBeverageValidateBeforeCall(beveragesBody, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteBeverage
     * @param id Unique identifier for the beverage. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Beverage deleted successfully. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failed. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteBeverageCall(UUID id, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beverages/{id}"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "BearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteBeverageValidateBeforeCall(UUID id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling deleteBeverage(Async)");
        }
        

        okhttp3.Call localVarCall = deleteBeverageCall(id, _callback);
        return localVarCall;

    }

    /**
     * Delete a beverage
     * Deletes a beverage.
     * @param id Unique identifier for the beverage. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Beverage deleted successfully. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failed. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found. </td><td>  -  </td></tr>
     </table>
     */
    public void deleteBeverage(UUID id) throws ApiException {
        deleteBeverageWithHttpInfo(id);
    }

    /**
     * Delete a beverage
     * Deletes a beverage.
     * @param id Unique identifier for the beverage. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Beverage deleted successfully. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failed. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteBeverageWithHttpInfo(UUID id) throws ApiException {
        okhttp3.Call localVarCall = deleteBeverageValidateBeforeCall(id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete a beverage (asynchronously)
     * Deletes a beverage.
     * @param id Unique identifier for the beverage. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Beverage deleted successfully. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failed. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteBeverageAsync(UUID id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteBeverageValidateBeforeCall(id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getBeverageById
     * @param id Unique identifier for the beverage. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Beverage details. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failed. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getBeverageByIdCall(UUID id, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beverages/{id}"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "BearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getBeverageByIdValidateBeforeCall(UUID id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getBeverageById(Async)");
        }
        

        okhttp3.Call localVarCall = getBeverageByIdCall(id, _callback);
        return localVarCall;

    }

    /**
     * Retrieve a beverage by ID
     * Retrieves details of a specific beverage.
     * @param id Unique identifier for the beverage. (required)
     * @return Beverage
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Beverage details. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failed. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found. </td><td>  -  </td></tr>
     </table>
     */
    public Beverage getBeverageById(UUID id) throws ApiException {
        ApiResponse<Beverage> localVarResp = getBeverageByIdWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * Retrieve a beverage by ID
     * Retrieves details of a specific beverage.
     * @param id Unique identifier for the beverage. (required)
     * @return ApiResponse&lt;Beverage&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Beverage details. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failed. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Beverage> getBeverageByIdWithHttpInfo(UUID id) throws ApiException {
        okhttp3.Call localVarCall = getBeverageByIdValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<Beverage>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve a beverage by ID (asynchronously)
     * Retrieves details of a specific beverage.
     * @param id Unique identifier for the beverage. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Beverage details. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failed. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getBeverageByIdAsync(UUID id, final ApiCallback<Beverage> _callback) throws ApiException {

        okhttp3.Call localVarCall = getBeverageByIdValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<Beverage>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getBeverages
     * @param page Page number. (optional, default to 1)
     * @param perPage Number of items per page. (optional, default to 10)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of beverages. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No beverages found. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getBeveragesCall(Integer page, Integer perPage, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beverages";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "BearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getBeveragesValidateBeforeCall(Integer page, Integer perPage, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = getBeveragesCall(page, perPage, _callback);
        return localVarCall;

    }

    /**
     * Retrieve all beverages
     * Retrieves a list of all beverages.
     * @param page Page number. (optional, default to 1)
     * @param perPage Number of items per page. (optional, default to 10)
     * @return InlineResponse200
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of beverages. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No beverages found. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failed. </td><td>  -  </td></tr>
     </table>
     */
    public InlineResponse200 getBeverages(Integer page, Integer perPage) throws ApiException {
        ApiResponse<InlineResponse200> localVarResp = getBeveragesWithHttpInfo(page, perPage);
        return localVarResp.getData();
    }

    /**
     * Retrieve all beverages
     * Retrieves a list of all beverages.
     * @param page Page number. (optional, default to 1)
     * @param perPage Number of items per page. (optional, default to 10)
     * @return ApiResponse&lt;InlineResponse200&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of beverages. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No beverages found. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<InlineResponse200> getBeveragesWithHttpInfo(Integer page, Integer perPage) throws ApiException {
        okhttp3.Call localVarCall = getBeveragesValidateBeforeCall(page, perPage, null);
        Type localVarReturnType = new TypeToken<InlineResponse200>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve all beverages (asynchronously)
     * Retrieves a list of all beverages.
     * @param page Page number. (optional, default to 1)
     * @param perPage Number of items per page. (optional, default to 10)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of beverages. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No beverages found. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getBeveragesAsync(Integer page, Integer perPage, final ApiCallback<InlineResponse200> _callback) throws ApiException {

        okhttp3.Call localVarCall = getBeveragesValidateBeforeCall(page, perPage, _callback);
        Type localVarReturnType = new TypeToken<InlineResponse200>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for replaceBeverage
     * @param id Unique identifier for the beverage. (required)
     * @param beveragesIdBody  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Beverage updated successfully. </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Beverage created successfully. </td><td>  * Location - URL to the newly created container type. <br>  </td></tr>
        <tr><td> 400 </td><td> Invalid request. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failed. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call replaceBeverageCall(UUID id, BeveragesIdBody beveragesIdBody, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = beveragesIdBody;

        // create path and map variables
        String localVarPath = "/beverages/{id}"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "BearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call replaceBeverageValidateBeforeCall(UUID id, BeveragesIdBody beveragesIdBody, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling replaceBeverage(Async)");
        }
        
        // verify the required parameter 'beveragesIdBody' is set
        if (beveragesIdBody == null) {
            throw new ApiException("Missing the required parameter 'beveragesIdBody' when calling replaceBeverage(Async)");
        }
        

        okhttp3.Call localVarCall = replaceBeverageCall(id, beveragesIdBody, _callback);
        return localVarCall;

    }

    /**
     * Update a beverage
     * Create or Replace an existing beverage.
     * @param id Unique identifier for the beverage. (required)
     * @param beveragesIdBody  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Beverage updated successfully. </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Beverage created successfully. </td><td>  * Location - URL to the newly created container type. <br>  </td></tr>
        <tr><td> 400 </td><td> Invalid request. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failed. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found. </td><td>  -  </td></tr>
     </table>
     */
    public void replaceBeverage(UUID id, BeveragesIdBody beveragesIdBody) throws ApiException {
        replaceBeverageWithHttpInfo(id, beveragesIdBody);
    }

    /**
     * Update a beverage
     * Create or Replace an existing beverage.
     * @param id Unique identifier for the beverage. (required)
     * @param beveragesIdBody  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Beverage updated successfully. </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Beverage created successfully. </td><td>  * Location - URL to the newly created container type. <br>  </td></tr>
        <tr><td> 400 </td><td> Invalid request. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failed. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> replaceBeverageWithHttpInfo(UUID id, BeveragesIdBody beveragesIdBody) throws ApiException {
        okhttp3.Call localVarCall = replaceBeverageValidateBeforeCall(id, beveragesIdBody, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Update a beverage (asynchronously)
     * Create or Replace an existing beverage.
     * @param id Unique identifier for the beverage. (required)
     * @param beveragesIdBody  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Beverage updated successfully. </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Beverage created successfully. </td><td>  * Location - URL to the newly created container type. <br>  </td></tr>
        <tr><td> 400 </td><td> Invalid request. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failed. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call replaceBeverageAsync(UUID id, BeveragesIdBody beveragesIdBody, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = replaceBeverageValidateBeforeCall(id, beveragesIdBody, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateBeverage
     * @param id Unique identifier for the beverage. (required)
     * @param beveragesIdBody1  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Beverage updated successfully. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failed. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateBeverageCall(UUID id, BeveragesIdBody1 beveragesIdBody1, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = beveragesIdBody1;

        // create path and map variables
        String localVarPath = "/beverages/{id}"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "BearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateBeverageValidateBeforeCall(UUID id, BeveragesIdBody1 beveragesIdBody1, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling updateBeverage(Async)");
        }
        
        // verify the required parameter 'beveragesIdBody1' is set
        if (beveragesIdBody1 == null) {
            throw new ApiException("Missing the required parameter 'beveragesIdBody1' when calling updateBeverage(Async)");
        }
        

        okhttp3.Call localVarCall = updateBeverageCall(id, beveragesIdBody1, _callback);
        return localVarCall;

    }

    /**
     * Partially update a beverage
     * Update an existing beverage.
     * @param id Unique identifier for the beverage. (required)
     * @param beveragesIdBody1  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Beverage updated successfully. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failed. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found. </td><td>  -  </td></tr>
     </table>
     */
    public void updateBeverage(UUID id, BeveragesIdBody1 beveragesIdBody1) throws ApiException {
        updateBeverageWithHttpInfo(id, beveragesIdBody1);
    }

    /**
     * Partially update a beverage
     * Update an existing beverage.
     * @param id Unique identifier for the beverage. (required)
     * @param beveragesIdBody1  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Beverage updated successfully. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failed. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> updateBeverageWithHttpInfo(UUID id, BeveragesIdBody1 beveragesIdBody1) throws ApiException {
        okhttp3.Call localVarCall = updateBeverageValidateBeforeCall(id, beveragesIdBody1, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Partially update a beverage (asynchronously)
     * Update an existing beverage.
     * @param id Unique identifier for the beverage. (required)
     * @param beveragesIdBody1  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Beverage updated successfully. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failed. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateBeverageAsync(UUID id, BeveragesIdBody1 beveragesIdBody1, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateBeverageValidateBeforeCall(id, beveragesIdBody1, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
}
