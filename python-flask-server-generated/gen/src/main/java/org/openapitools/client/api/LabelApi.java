/*
 * Beverage E-commerce API
 * API for managing beverages, labels, ingredients, container types, and unit measures in a beverage e-commerce platform.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.ErrorResponse;
import org.openapitools.client.model.IdLabelsBody;
import org.openapitools.client.model.Label;
import org.openapitools.client.model.LabelsIdBody;
import org.openapitools.client.model.LabelsIdBody1;
import java.util.UUID;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class LabelApi {
    private ApiClient localVarApiClient;

    public LabelApi() {
        this(Configuration.getDefaultApiClient());
    }

    public LabelApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for createLabel
     * @param id Unique identifier for the beverages. (required)
     * @param idLabelsBody  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Label created successfully. </td><td>  * Location - URL to the newly created container type. <br>  </td></tr>
        <tr><td> 400 </td><td> Invalid request. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failed. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Access forbidden. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createLabelCall(UUID id, IdLabelsBody idLabelsBody, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = idLabelsBody;

        // create path and map variables
        String localVarPath = "/beverages/{id}/labels"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "BearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createLabelValidateBeforeCall(UUID id, IdLabelsBody idLabelsBody, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling createLabel(Async)");
        }
        
        // verify the required parameter 'idLabelsBody' is set
        if (idLabelsBody == null) {
            throw new ApiException("Missing the required parameter 'idLabelsBody' when calling createLabel(Async)");
        }
        

        okhttp3.Call localVarCall = createLabelCall(id, idLabelsBody, _callback);
        return localVarCall;

    }

    /**
     * Create a new label
     * Creates a new label.
     * @param id Unique identifier for the beverages. (required)
     * @param idLabelsBody  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Label created successfully. </td><td>  * Location - URL to the newly created container type. <br>  </td></tr>
        <tr><td> 400 </td><td> Invalid request. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failed. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Access forbidden. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found. </td><td>  -  </td></tr>
     </table>
     */
    public void createLabel(UUID id, IdLabelsBody idLabelsBody) throws ApiException {
        createLabelWithHttpInfo(id, idLabelsBody);
    }

    /**
     * Create a new label
     * Creates a new label.
     * @param id Unique identifier for the beverages. (required)
     * @param idLabelsBody  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Label created successfully. </td><td>  * Location - URL to the newly created container type. <br>  </td></tr>
        <tr><td> 400 </td><td> Invalid request. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failed. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Access forbidden. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> createLabelWithHttpInfo(UUID id, IdLabelsBody idLabelsBody) throws ApiException {
        okhttp3.Call localVarCall = createLabelValidateBeforeCall(id, idLabelsBody, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Create a new label (asynchronously)
     * Creates a new label.
     * @param id Unique identifier for the beverages. (required)
     * @param idLabelsBody  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Label created successfully. </td><td>  * Location - URL to the newly created container type. <br>  </td></tr>
        <tr><td> 400 </td><td> Invalid request. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failed. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Access forbidden. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createLabelAsync(UUID id, IdLabelsBody idLabelsBody, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = createLabelValidateBeforeCall(id, idLabelsBody, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteLabel
     * @param beverageId Unique identifier for the beverage. (required)
     * @param id Unique identifier for the label. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Label deleted successfully. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failed. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Access forbidden. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteLabelCall(UUID beverageId, UUID id, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beverages/{beverageId}/labels/{id}"
            .replaceAll("\\{" + "beverageId" + "\\}", localVarApiClient.escapeString(beverageId.toString()))
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "BearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteLabelValidateBeforeCall(UUID beverageId, UUID id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'beverageId' is set
        if (beverageId == null) {
            throw new ApiException("Missing the required parameter 'beverageId' when calling deleteLabel(Async)");
        }
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling deleteLabel(Async)");
        }
        

        okhttp3.Call localVarCall = deleteLabelCall(beverageId, id, _callback);
        return localVarCall;

    }

    /**
     * Delete a label
     * Deletes a label.
     * @param beverageId Unique identifier for the beverage. (required)
     * @param id Unique identifier for the label. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Label deleted successfully. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failed. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Access forbidden. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found. </td><td>  -  </td></tr>
     </table>
     */
    public void deleteLabel(UUID beverageId, UUID id) throws ApiException {
        deleteLabelWithHttpInfo(beverageId, id);
    }

    /**
     * Delete a label
     * Deletes a label.
     * @param beverageId Unique identifier for the beverage. (required)
     * @param id Unique identifier for the label. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Label deleted successfully. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failed. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Access forbidden. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteLabelWithHttpInfo(UUID beverageId, UUID id) throws ApiException {
        okhttp3.Call localVarCall = deleteLabelValidateBeforeCall(beverageId, id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete a label (asynchronously)
     * Deletes a label.
     * @param beverageId Unique identifier for the beverage. (required)
     * @param id Unique identifier for the label. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Label deleted successfully. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failed. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Access forbidden. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteLabelAsync(UUID beverageId, UUID id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteLabelValidateBeforeCall(beverageId, id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getLabelById
     * @param beverageId Unique identifier for the beverage. (required)
     * @param id Unique identifier for the label. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Label details. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failed. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getLabelByIdCall(UUID beverageId, UUID id, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beverages/{beverageId}/labels/{id}"
            .replaceAll("\\{" + "beverageId" + "\\}", localVarApiClient.escapeString(beverageId.toString()))
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "BearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getLabelByIdValidateBeforeCall(UUID beverageId, UUID id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'beverageId' is set
        if (beverageId == null) {
            throw new ApiException("Missing the required parameter 'beverageId' when calling getLabelById(Async)");
        }
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getLabelById(Async)");
        }
        

        okhttp3.Call localVarCall = getLabelByIdCall(beverageId, id, _callback);
        return localVarCall;

    }

    /**
     * Retrieve a label by ID and beverage ID
     * Retrieves details of a specific label.
     * @param beverageId Unique identifier for the beverage. (required)
     * @param id Unique identifier for the label. (required)
     * @return Label
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Label details. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failed. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found. </td><td>  -  </td></tr>
     </table>
     */
    public Label getLabelById(UUID beverageId, UUID id) throws ApiException {
        ApiResponse<Label> localVarResp = getLabelByIdWithHttpInfo(beverageId, id);
        return localVarResp.getData();
    }

    /**
     * Retrieve a label by ID and beverage ID
     * Retrieves details of a specific label.
     * @param beverageId Unique identifier for the beverage. (required)
     * @param id Unique identifier for the label. (required)
     * @return ApiResponse&lt;Label&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Label details. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failed. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Label> getLabelByIdWithHttpInfo(UUID beverageId, UUID id) throws ApiException {
        okhttp3.Call localVarCall = getLabelByIdValidateBeforeCall(beverageId, id, null);
        Type localVarReturnType = new TypeToken<Label>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve a label by ID and beverage ID (asynchronously)
     * Retrieves details of a specific label.
     * @param beverageId Unique identifier for the beverage. (required)
     * @param id Unique identifier for the label. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Label details. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failed. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getLabelByIdAsync(UUID beverageId, UUID id, final ApiCallback<Label> _callback) throws ApiException {

        okhttp3.Call localVarCall = getLabelByIdValidateBeforeCall(beverageId, id, _callback);
        Type localVarReturnType = new TypeToken<Label>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getLabels
     * @param id Unique identifier for the beverages. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of labels. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failed. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getLabelsCall(UUID id, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beverages/{id}/labels"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "BearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getLabelsValidateBeforeCall(UUID id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getLabels(Async)");
        }
        

        okhttp3.Call localVarCall = getLabelsCall(id, _callback);
        return localVarCall;

    }

    /**
     * Retrieve all labels
     * Retrieves a list of all labels.
     * @param id Unique identifier for the beverages. (required)
     * @return List&lt;Label&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of labels. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failed. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found. </td><td>  -  </td></tr>
     </table>
     */
    public List<Label> getLabels(UUID id) throws ApiException {
        ApiResponse<List<Label>> localVarResp = getLabelsWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * Retrieve all labels
     * Retrieves a list of all labels.
     * @param id Unique identifier for the beverages. (required)
     * @return ApiResponse&lt;List&lt;Label&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of labels. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failed. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Label>> getLabelsWithHttpInfo(UUID id) throws ApiException {
        okhttp3.Call localVarCall = getLabelsValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<List<Label>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve all labels (asynchronously)
     * Retrieves a list of all labels.
     * @param id Unique identifier for the beverages. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of labels. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failed. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getLabelsAsync(UUID id, final ApiCallback<List<Label>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getLabelsValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<List<Label>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for replaceLabel
     * @param beverageId Unique identifier for the beverage. (required)
     * @param id Unique identifier for the label. (required)
     * @param labelsIdBody  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Label updated successfully. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failed. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Access forbidden. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call replaceLabelCall(UUID beverageId, UUID id, LabelsIdBody labelsIdBody, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = labelsIdBody;

        // create path and map variables
        String localVarPath = "/beverages/{beverageId}/labels/{id}"
            .replaceAll("\\{" + "beverageId" + "\\}", localVarApiClient.escapeString(beverageId.toString()))
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "BearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call replaceLabelValidateBeforeCall(UUID beverageId, UUID id, LabelsIdBody labelsIdBody, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'beverageId' is set
        if (beverageId == null) {
            throw new ApiException("Missing the required parameter 'beverageId' when calling replaceLabel(Async)");
        }
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling replaceLabel(Async)");
        }
        
        // verify the required parameter 'labelsIdBody' is set
        if (labelsIdBody == null) {
            throw new ApiException("Missing the required parameter 'labelsIdBody' when calling replaceLabel(Async)");
        }
        

        okhttp3.Call localVarCall = replaceLabelCall(beverageId, id, labelsIdBody, _callback);
        return localVarCall;

    }

    /**
     * Update a label
     * Create or Replace an existing label.
     * @param beverageId Unique identifier for the beverage. (required)
     * @param id Unique identifier for the label. (required)
     * @param labelsIdBody  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Label updated successfully. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failed. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Access forbidden. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found. </td><td>  -  </td></tr>
     </table>
     */
    public void replaceLabel(UUID beverageId, UUID id, LabelsIdBody labelsIdBody) throws ApiException {
        replaceLabelWithHttpInfo(beverageId, id, labelsIdBody);
    }

    /**
     * Update a label
     * Create or Replace an existing label.
     * @param beverageId Unique identifier for the beverage. (required)
     * @param id Unique identifier for the label. (required)
     * @param labelsIdBody  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Label updated successfully. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failed. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Access forbidden. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> replaceLabelWithHttpInfo(UUID beverageId, UUID id, LabelsIdBody labelsIdBody) throws ApiException {
        okhttp3.Call localVarCall = replaceLabelValidateBeforeCall(beverageId, id, labelsIdBody, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Update a label (asynchronously)
     * Create or Replace an existing label.
     * @param beverageId Unique identifier for the beverage. (required)
     * @param id Unique identifier for the label. (required)
     * @param labelsIdBody  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Label updated successfully. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failed. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Access forbidden. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call replaceLabelAsync(UUID beverageId, UUID id, LabelsIdBody labelsIdBody, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = replaceLabelValidateBeforeCall(beverageId, id, labelsIdBody, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateLabel
     * @param beverageId Unique identifier for the beverage. (required)
     * @param id Unique identifier for the label. (required)
     * @param labelsIdBody1  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Label updated successfully. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failed. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Access forbidden. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateLabelCall(UUID beverageId, UUID id, LabelsIdBody1 labelsIdBody1, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = labelsIdBody1;

        // create path and map variables
        String localVarPath = "/beverages/{beverageId}/labels/{id}"
            .replaceAll("\\{" + "beverageId" + "\\}", localVarApiClient.escapeString(beverageId.toString()))
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "BearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateLabelValidateBeforeCall(UUID beverageId, UUID id, LabelsIdBody1 labelsIdBody1, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'beverageId' is set
        if (beverageId == null) {
            throw new ApiException("Missing the required parameter 'beverageId' when calling updateLabel(Async)");
        }
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling updateLabel(Async)");
        }
        
        // verify the required parameter 'labelsIdBody1' is set
        if (labelsIdBody1 == null) {
            throw new ApiException("Missing the required parameter 'labelsIdBody1' when calling updateLabel(Async)");
        }
        

        okhttp3.Call localVarCall = updateLabelCall(beverageId, id, labelsIdBody1, _callback);
        return localVarCall;

    }

    /**
     * Partially update a label
     * Update existing label.
     * @param beverageId Unique identifier for the beverage. (required)
     * @param id Unique identifier for the label. (required)
     * @param labelsIdBody1  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Label updated successfully. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failed. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Access forbidden. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found. </td><td>  -  </td></tr>
     </table>
     */
    public void updateLabel(UUID beverageId, UUID id, LabelsIdBody1 labelsIdBody1) throws ApiException {
        updateLabelWithHttpInfo(beverageId, id, labelsIdBody1);
    }

    /**
     * Partially update a label
     * Update existing label.
     * @param beverageId Unique identifier for the beverage. (required)
     * @param id Unique identifier for the label. (required)
     * @param labelsIdBody1  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Label updated successfully. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failed. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Access forbidden. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> updateLabelWithHttpInfo(UUID beverageId, UUID id, LabelsIdBody1 labelsIdBody1) throws ApiException {
        okhttp3.Call localVarCall = updateLabelValidateBeforeCall(beverageId, id, labelsIdBody1, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Partially update a label (asynchronously)
     * Update existing label.
     * @param beverageId Unique identifier for the beverage. (required)
     * @param id Unique identifier for the label. (required)
     * @param labelsIdBody1  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Label updated successfully. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failed. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Access forbidden. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateLabelAsync(UUID beverageId, UUID id, LabelsIdBody1 labelsIdBody1, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateLabelValidateBeforeCall(beverageId, id, labelsIdBody1, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
}
