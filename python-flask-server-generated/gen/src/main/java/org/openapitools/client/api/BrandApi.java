/*
 * Beverage E-commerce API
 * API for managing beverages, labels, ingredients, container types, and unit measures in a beverage e-commerce platform.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.Brand;
import org.openapitools.client.model.BrandsBody;
import org.openapitools.client.model.BrandsIdBody;
import org.openapitools.client.model.BrandsIdBody1;
import org.openapitools.client.model.ErrorResponse;
import java.util.UUID;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class BrandApi {
    private ApiClient localVarApiClient;

    public BrandApi() {
        this(Configuration.getDefaultApiClient());
    }

    public BrandApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for createBrand
     * @param brandsBody  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Brand created successfully. </td><td>  * Location - URL to the newly created container type. <br>  </td></tr>
        <tr><td> 400 </td><td> Invalid request. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failed. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Access forbidden. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createBrandCall(BrandsBody brandsBody, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = brandsBody;

        // create path and map variables
        String localVarPath = "/brands";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "BearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createBrandValidateBeforeCall(BrandsBody brandsBody, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'brandsBody' is set
        if (brandsBody == null) {
            throw new ApiException("Missing the required parameter 'brandsBody' when calling createBrand(Async)");
        }
        

        okhttp3.Call localVarCall = createBrandCall(brandsBody, _callback);
        return localVarCall;

    }

    /**
     * Create a new brand
     * Creates a new brand.
     * @param brandsBody  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Brand created successfully. </td><td>  * Location - URL to the newly created container type. <br>  </td></tr>
        <tr><td> 400 </td><td> Invalid request. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failed. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Access forbidden. </td><td>  -  </td></tr>
     </table>
     */
    public void createBrand(BrandsBody brandsBody) throws ApiException {
        createBrandWithHttpInfo(brandsBody);
    }

    /**
     * Create a new brand
     * Creates a new brand.
     * @param brandsBody  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Brand created successfully. </td><td>  * Location - URL to the newly created container type. <br>  </td></tr>
        <tr><td> 400 </td><td> Invalid request. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failed. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Access forbidden. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> createBrandWithHttpInfo(BrandsBody brandsBody) throws ApiException {
        okhttp3.Call localVarCall = createBrandValidateBeforeCall(brandsBody, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Create a new brand (asynchronously)
     * Creates a new brand.
     * @param brandsBody  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Brand created successfully. </td><td>  * Location - URL to the newly created container type. <br>  </td></tr>
        <tr><td> 400 </td><td> Invalid request. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failed. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Access forbidden. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createBrandAsync(BrandsBody brandsBody, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = createBrandValidateBeforeCall(brandsBody, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteBrand
     * @param id Unique identifier for the brand. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Brand deleted successfully. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failed. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Access forbidden. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteBrandCall(UUID id, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/brands/{id}"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "BearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteBrandValidateBeforeCall(UUID id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling deleteBrand(Async)");
        }
        

        okhttp3.Call localVarCall = deleteBrandCall(id, _callback);
        return localVarCall;

    }

    /**
     * Delete a brand
     * Deletes a brand.
     * @param id Unique identifier for the brand. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Brand deleted successfully. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failed. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Access forbidden. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found. </td><td>  -  </td></tr>
     </table>
     */
    public void deleteBrand(UUID id) throws ApiException {
        deleteBrandWithHttpInfo(id);
    }

    /**
     * Delete a brand
     * Deletes a brand.
     * @param id Unique identifier for the brand. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Brand deleted successfully. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failed. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Access forbidden. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteBrandWithHttpInfo(UUID id) throws ApiException {
        okhttp3.Call localVarCall = deleteBrandValidateBeforeCall(id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete a brand (asynchronously)
     * Deletes a brand.
     * @param id Unique identifier for the brand. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Brand deleted successfully. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failed. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Access forbidden. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteBrandAsync(UUID id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteBrandValidateBeforeCall(id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getBrandById
     * @param id Unique identifier for the brand. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Brand details. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failed. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getBrandByIdCall(UUID id, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/brands/{id}"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "BearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getBrandByIdValidateBeforeCall(UUID id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getBrandById(Async)");
        }
        

        okhttp3.Call localVarCall = getBrandByIdCall(id, _callback);
        return localVarCall;

    }

    /**
     * Retrieve a brand by ID
     * Retrieves details of a specific brand.
     * @param id Unique identifier for the brand. (required)
     * @return Brand
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Brand details. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failed. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found. </td><td>  -  </td></tr>
     </table>
     */
    public Brand getBrandById(UUID id) throws ApiException {
        ApiResponse<Brand> localVarResp = getBrandByIdWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * Retrieve a brand by ID
     * Retrieves details of a specific brand.
     * @param id Unique identifier for the brand. (required)
     * @return ApiResponse&lt;Brand&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Brand details. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failed. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Brand> getBrandByIdWithHttpInfo(UUID id) throws ApiException {
        okhttp3.Call localVarCall = getBrandByIdValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<Brand>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve a brand by ID (asynchronously)
     * Retrieves details of a specific brand.
     * @param id Unique identifier for the brand. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Brand details. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failed. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getBrandByIdAsync(UUID id, final ApiCallback<Brand> _callback) throws ApiException {

        okhttp3.Call localVarCall = getBrandByIdValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<Brand>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getBrands
     * @param page Page number. (optional, default to 1)
     * @param perPage Number of items per page. (optional, default to 10)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of brands. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getBrandsCall(Integer page, Integer perPage, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/brands";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "BearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getBrandsValidateBeforeCall(Integer page, Integer perPage, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = getBrandsCall(page, perPage, _callback);
        return localVarCall;

    }

    /**
     * Retrieve all brand
     * Retrieves a list of all brands.
     * @param page Page number. (optional, default to 1)
     * @param perPage Number of items per page. (optional, default to 10)
     * @return List&lt;Brand&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of brands. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failed. </td><td>  -  </td></tr>
     </table>
     */
    public List<Brand> getBrands(Integer page, Integer perPage) throws ApiException {
        ApiResponse<List<Brand>> localVarResp = getBrandsWithHttpInfo(page, perPage);
        return localVarResp.getData();
    }

    /**
     * Retrieve all brand
     * Retrieves a list of all brands.
     * @param page Page number. (optional, default to 1)
     * @param perPage Number of items per page. (optional, default to 10)
     * @return ApiResponse&lt;List&lt;Brand&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of brands. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Brand>> getBrandsWithHttpInfo(Integer page, Integer perPage) throws ApiException {
        okhttp3.Call localVarCall = getBrandsValidateBeforeCall(page, perPage, null);
        Type localVarReturnType = new TypeToken<List<Brand>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve all brand (asynchronously)
     * Retrieves a list of all brands.
     * @param page Page number. (optional, default to 1)
     * @param perPage Number of items per page. (optional, default to 10)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of brands. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getBrandsAsync(Integer page, Integer perPage, final ApiCallback<List<Brand>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getBrandsValidateBeforeCall(page, perPage, _callback);
        Type localVarReturnType = new TypeToken<List<Brand>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for replaceBrand
     * @param id Unique identifier for the brand. (required)
     * @param brandsIdBody  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Brand updated successfully. </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Brand created successfully. </td><td>  * Location - URL to the newly created container type. <br>  </td></tr>
        <tr><td> 400 </td><td> Invalid request. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failed. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Access forbidden. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call replaceBrandCall(UUID id, BrandsIdBody brandsIdBody, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = brandsIdBody;

        // create path and map variables
        String localVarPath = "/brands/{id}"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "BearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call replaceBrandValidateBeforeCall(UUID id, BrandsIdBody brandsIdBody, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling replaceBrand(Async)");
        }
        
        // verify the required parameter 'brandsIdBody' is set
        if (brandsIdBody == null) {
            throw new ApiException("Missing the required parameter 'brandsIdBody' when calling replaceBrand(Async)");
        }
        

        okhttp3.Call localVarCall = replaceBrandCall(id, brandsIdBody, _callback);
        return localVarCall;

    }

    /**
     * Update a brand
     * Create or replace an existing brand.
     * @param id Unique identifier for the brand. (required)
     * @param brandsIdBody  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Brand updated successfully. </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Brand created successfully. </td><td>  * Location - URL to the newly created container type. <br>  </td></tr>
        <tr><td> 400 </td><td> Invalid request. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failed. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Access forbidden. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found. </td><td>  -  </td></tr>
     </table>
     */
    public void replaceBrand(UUID id, BrandsIdBody brandsIdBody) throws ApiException {
        replaceBrandWithHttpInfo(id, brandsIdBody);
    }

    /**
     * Update a brand
     * Create or replace an existing brand.
     * @param id Unique identifier for the brand. (required)
     * @param brandsIdBody  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Brand updated successfully. </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Brand created successfully. </td><td>  * Location - URL to the newly created container type. <br>  </td></tr>
        <tr><td> 400 </td><td> Invalid request. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failed. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Access forbidden. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> replaceBrandWithHttpInfo(UUID id, BrandsIdBody brandsIdBody) throws ApiException {
        okhttp3.Call localVarCall = replaceBrandValidateBeforeCall(id, brandsIdBody, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Update a brand (asynchronously)
     * Create or replace an existing brand.
     * @param id Unique identifier for the brand. (required)
     * @param brandsIdBody  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Brand updated successfully. </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Brand created successfully. </td><td>  * Location - URL to the newly created container type. <br>  </td></tr>
        <tr><td> 400 </td><td> Invalid request. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failed. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Access forbidden. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call replaceBrandAsync(UUID id, BrandsIdBody brandsIdBody, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = replaceBrandValidateBeforeCall(id, brandsIdBody, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateBrand
     * @param id Unique identifier for the brand. (required)
     * @param brandsIdBody1  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Brand updated successfully. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failed. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Access forbidden. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateBrandCall(UUID id, BrandsIdBody1 brandsIdBody1, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = brandsIdBody1;

        // create path and map variables
        String localVarPath = "/brands/{id}"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "BearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateBrandValidateBeforeCall(UUID id, BrandsIdBody1 brandsIdBody1, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling updateBrand(Async)");
        }
        
        // verify the required parameter 'brandsIdBody1' is set
        if (brandsIdBody1 == null) {
            throw new ApiException("Missing the required parameter 'brandsIdBody1' when calling updateBrand(Async)");
        }
        

        okhttp3.Call localVarCall = updateBrandCall(id, brandsIdBody1, _callback);
        return localVarCall;

    }

    /**
     * Partially update a brand
     * Update an existing brand.
     * @param id Unique identifier for the brand. (required)
     * @param brandsIdBody1  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Brand updated successfully. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failed. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Access forbidden. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found. </td><td>  -  </td></tr>
     </table>
     */
    public void updateBrand(UUID id, BrandsIdBody1 brandsIdBody1) throws ApiException {
        updateBrandWithHttpInfo(id, brandsIdBody1);
    }

    /**
     * Partially update a brand
     * Update an existing brand.
     * @param id Unique identifier for the brand. (required)
     * @param brandsIdBody1  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Brand updated successfully. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failed. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Access forbidden. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> updateBrandWithHttpInfo(UUID id, BrandsIdBody1 brandsIdBody1) throws ApiException {
        okhttp3.Call localVarCall = updateBrandValidateBeforeCall(id, brandsIdBody1, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Partially update a brand (asynchronously)
     * Update an existing brand.
     * @param id Unique identifier for the brand. (required)
     * @param brandsIdBody1  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Brand updated successfully. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failed. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Access forbidden. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateBrandAsync(UUID id, BrandsIdBody1 brandsIdBody1, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateBrandValidateBeforeCall(id, brandsIdBody1, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
}
