/*
 * Beverage E-commerce API
 * API for managing beverages, labels, ingredients, container types, and unit measures in a beverage e-commerce platform.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.ErrorResponse;
import org.openapitools.client.model.Ingredient;
import org.openapitools.client.model.IngredientsBody;
import org.openapitools.client.model.IngredientsIdBody;
import org.openapitools.client.model.IngredientsIdBody1;
import java.util.UUID;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class IngredientApi {
    private ApiClient localVarApiClient;

    public IngredientApi() {
        this(Configuration.getDefaultApiClient());
    }

    public IngredientApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for createIngredient
     * @param ingredientsBody  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Ingredient created successfully. </td><td>  * Location - URL to the newly created container type. <br>  </td></tr>
        <tr><td> 400 </td><td> Invalid request. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failed. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Access forbidden. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createIngredientCall(IngredientsBody ingredientsBody, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = ingredientsBody;

        // create path and map variables
        String localVarPath = "/ingredients";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "BearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createIngredientValidateBeforeCall(IngredientsBody ingredientsBody, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'ingredientsBody' is set
        if (ingredientsBody == null) {
            throw new ApiException("Missing the required parameter 'ingredientsBody' when calling createIngredient(Async)");
        }
        

        okhttp3.Call localVarCall = createIngredientCall(ingredientsBody, _callback);
        return localVarCall;

    }

    /**
     * Create a new ingredient
     * Creates a new ingredient.
     * @param ingredientsBody  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Ingredient created successfully. </td><td>  * Location - URL to the newly created container type. <br>  </td></tr>
        <tr><td> 400 </td><td> Invalid request. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failed. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Access forbidden. </td><td>  -  </td></tr>
     </table>
     */
    public void createIngredient(IngredientsBody ingredientsBody) throws ApiException {
        createIngredientWithHttpInfo(ingredientsBody);
    }

    /**
     * Create a new ingredient
     * Creates a new ingredient.
     * @param ingredientsBody  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Ingredient created successfully. </td><td>  * Location - URL to the newly created container type. <br>  </td></tr>
        <tr><td> 400 </td><td> Invalid request. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failed. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Access forbidden. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> createIngredientWithHttpInfo(IngredientsBody ingredientsBody) throws ApiException {
        okhttp3.Call localVarCall = createIngredientValidateBeforeCall(ingredientsBody, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Create a new ingredient (asynchronously)
     * Creates a new ingredient.
     * @param ingredientsBody  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Ingredient created successfully. </td><td>  * Location - URL to the newly created container type. <br>  </td></tr>
        <tr><td> 400 </td><td> Invalid request. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failed. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Access forbidden. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createIngredientAsync(IngredientsBody ingredientsBody, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = createIngredientValidateBeforeCall(ingredientsBody, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteIngredient
     * @param id Unique identifier for the ingredient. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Ingredient deleted successfully. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failed. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Access forbidden. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteIngredientCall(UUID id, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/ingredients/{id}"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "BearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteIngredientValidateBeforeCall(UUID id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling deleteIngredient(Async)");
        }
        

        okhttp3.Call localVarCall = deleteIngredientCall(id, _callback);
        return localVarCall;

    }

    /**
     * Delete an ingredient
     * Deletes an ingredient.
     * @param id Unique identifier for the ingredient. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Ingredient deleted successfully. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failed. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Access forbidden. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found. </td><td>  -  </td></tr>
     </table>
     */
    public void deleteIngredient(UUID id) throws ApiException {
        deleteIngredientWithHttpInfo(id);
    }

    /**
     * Delete an ingredient
     * Deletes an ingredient.
     * @param id Unique identifier for the ingredient. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Ingredient deleted successfully. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failed. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Access forbidden. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteIngredientWithHttpInfo(UUID id) throws ApiException {
        okhttp3.Call localVarCall = deleteIngredientValidateBeforeCall(id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete an ingredient (asynchronously)
     * Deletes an ingredient.
     * @param id Unique identifier for the ingredient. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Ingredient deleted successfully. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failed. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Access forbidden. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteIngredientAsync(UUID id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteIngredientValidateBeforeCall(id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getIngredientById
     * @param id Unique identifier for the ingredient. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ingredient details. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failed. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getIngredientByIdCall(UUID id, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/ingredients/{id}"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "BearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getIngredientByIdValidateBeforeCall(UUID id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getIngredientById(Async)");
        }
        

        okhttp3.Call localVarCall = getIngredientByIdCall(id, _callback);
        return localVarCall;

    }

    /**
     * Retrieve an ingredient by ID
     * Retrieves details of a specific ingredient.
     * @param id Unique identifier for the ingredient. (required)
     * @return Ingredient
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ingredient details. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failed. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found. </td><td>  -  </td></tr>
     </table>
     */
    public Ingredient getIngredientById(UUID id) throws ApiException {
        ApiResponse<Ingredient> localVarResp = getIngredientByIdWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * Retrieve an ingredient by ID
     * Retrieves details of a specific ingredient.
     * @param id Unique identifier for the ingredient. (required)
     * @return ApiResponse&lt;Ingredient&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ingredient details. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failed. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Ingredient> getIngredientByIdWithHttpInfo(UUID id) throws ApiException {
        okhttp3.Call localVarCall = getIngredientByIdValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<Ingredient>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve an ingredient by ID (asynchronously)
     * Retrieves details of a specific ingredient.
     * @param id Unique identifier for the ingredient. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ingredient details. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failed. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getIngredientByIdAsync(UUID id, final ApiCallback<Ingredient> _callback) throws ApiException {

        okhttp3.Call localVarCall = getIngredientByIdValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<Ingredient>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getIngredients
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of ingredients. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getIngredientsCall(final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/ingredients";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "BearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getIngredientsValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = getIngredientsCall(_callback);
        return localVarCall;

    }

    /**
     * Retrieve all ingredients
     * Retrieves a list of all ingredients.
     * @return List&lt;Ingredient&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of ingredients. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failed. </td><td>  -  </td></tr>
     </table>
     */
    public List<Ingredient> getIngredients() throws ApiException {
        ApiResponse<List<Ingredient>> localVarResp = getIngredientsWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Retrieve all ingredients
     * Retrieves a list of all ingredients.
     * @return ApiResponse&lt;List&lt;Ingredient&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of ingredients. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Ingredient>> getIngredientsWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = getIngredientsValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<List<Ingredient>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve all ingredients (asynchronously)
     * Retrieves a list of all ingredients.
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of ingredients. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getIngredientsAsync(final ApiCallback<List<Ingredient>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getIngredientsValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<List<Ingredient>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for replaceIngredient
     * @param id Unique identifier for the ingredient. (required)
     * @param ingredientsIdBody  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ingredient updated successfully. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failed. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Access forbidden. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call replaceIngredientCall(UUID id, IngredientsIdBody ingredientsIdBody, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = ingredientsIdBody;

        // create path and map variables
        String localVarPath = "/ingredients/{id}"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "BearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call replaceIngredientValidateBeforeCall(UUID id, IngredientsIdBody ingredientsIdBody, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling replaceIngredient(Async)");
        }
        
        // verify the required parameter 'ingredientsIdBody' is set
        if (ingredientsIdBody == null) {
            throw new ApiException("Missing the required parameter 'ingredientsIdBody' when calling replaceIngredient(Async)");
        }
        

        okhttp3.Call localVarCall = replaceIngredientCall(id, ingredientsIdBody, _callback);
        return localVarCall;

    }

    /**
     * Update an ingredient
     * Create or Replace an existing ingredient.
     * @param id Unique identifier for the ingredient. (required)
     * @param ingredientsIdBody  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ingredient updated successfully. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failed. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Access forbidden. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found. </td><td>  -  </td></tr>
     </table>
     */
    public void replaceIngredient(UUID id, IngredientsIdBody ingredientsIdBody) throws ApiException {
        replaceIngredientWithHttpInfo(id, ingredientsIdBody);
    }

    /**
     * Update an ingredient
     * Create or Replace an existing ingredient.
     * @param id Unique identifier for the ingredient. (required)
     * @param ingredientsIdBody  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ingredient updated successfully. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failed. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Access forbidden. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> replaceIngredientWithHttpInfo(UUID id, IngredientsIdBody ingredientsIdBody) throws ApiException {
        okhttp3.Call localVarCall = replaceIngredientValidateBeforeCall(id, ingredientsIdBody, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Update an ingredient (asynchronously)
     * Create or Replace an existing ingredient.
     * @param id Unique identifier for the ingredient. (required)
     * @param ingredientsIdBody  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ingredient updated successfully. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failed. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Access forbidden. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call replaceIngredientAsync(UUID id, IngredientsIdBody ingredientsIdBody, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = replaceIngredientValidateBeforeCall(id, ingredientsIdBody, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateIngredient
     * @param id Unique identifier for the ingredient. (required)
     * @param ingredientsIdBody1  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ingredient updated successfully. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failed. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Access forbidden. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateIngredientCall(UUID id, IngredientsIdBody1 ingredientsIdBody1, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = ingredientsIdBody1;

        // create path and map variables
        String localVarPath = "/ingredients/{id}"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "BearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateIngredientValidateBeforeCall(UUID id, IngredientsIdBody1 ingredientsIdBody1, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling updateIngredient(Async)");
        }
        
        // verify the required parameter 'ingredientsIdBody1' is set
        if (ingredientsIdBody1 == null) {
            throw new ApiException("Missing the required parameter 'ingredientsIdBody1' when calling updateIngredient(Async)");
        }
        

        okhttp3.Call localVarCall = updateIngredientCall(id, ingredientsIdBody1, _callback);
        return localVarCall;

    }

    /**
     * Update an ingredient
     * Updates an existing ingredient.
     * @param id Unique identifier for the ingredient. (required)
     * @param ingredientsIdBody1  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ingredient updated successfully. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failed. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Access forbidden. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found. </td><td>  -  </td></tr>
     </table>
     */
    public void updateIngredient(UUID id, IngredientsIdBody1 ingredientsIdBody1) throws ApiException {
        updateIngredientWithHttpInfo(id, ingredientsIdBody1);
    }

    /**
     * Update an ingredient
     * Updates an existing ingredient.
     * @param id Unique identifier for the ingredient. (required)
     * @param ingredientsIdBody1  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ingredient updated successfully. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failed. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Access forbidden. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> updateIngredientWithHttpInfo(UUID id, IngredientsIdBody1 ingredientsIdBody1) throws ApiException {
        okhttp3.Call localVarCall = updateIngredientValidateBeforeCall(id, ingredientsIdBody1, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Update an ingredient (asynchronously)
     * Updates an existing ingredient.
     * @param id Unique identifier for the ingredient. (required)
     * @param ingredientsIdBody1  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ingredient updated successfully. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failed. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Access forbidden. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateIngredientAsync(UUID id, IngredientsIdBody1 ingredientsIdBody1, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateIngredientValidateBeforeCall(id, ingredientsIdBody1, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
}
