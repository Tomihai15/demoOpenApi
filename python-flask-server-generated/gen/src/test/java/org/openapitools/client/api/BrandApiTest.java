/*
 * Beverage E-commerce API
 * API for managing beverages, labels, ingredients, container types, and unit measures in a beverage e-commerce platform.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.Brand;
import org.openapitools.client.model.BrandsBody;
import org.openapitools.client.model.BrandsIdBody;
import org.openapitools.client.model.BrandsIdBody1;
import org.openapitools.client.model.ErrorResponse;
import java.util.UUID;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for BrandApi
 */
@Ignore
public class BrandApiTest {

    private final BrandApi api = new BrandApi();

    
    /**
     * Create a new brand
     *
     * Creates a new brand.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createBrandTest() throws ApiException {
        BrandsBody brandsBody = null;
        api.createBrand(brandsBody);

        // TODO: test validations
    }
    
    /**
     * Delete a brand
     *
     * Deletes a brand.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteBrandTest() throws ApiException {
        UUID id = null;
        api.deleteBrand(id);

        // TODO: test validations
    }
    
    /**
     * Retrieve a brand by ID
     *
     * Retrieves details of a specific brand.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getBrandByIdTest() throws ApiException {
        UUID id = null;
        Brand response = api.getBrandById(id);

        // TODO: test validations
    }
    
    /**
     * Retrieve all brand
     *
     * Retrieves a list of all brands.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getBrandsTest() throws ApiException {
        Integer page = null;
        Integer perPage = null;
        List<Brand> response = api.getBrands(page, perPage);

        // TODO: test validations
    }
    
    /**
     * Update a brand
     *
     * Create or replace an existing brand.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void replaceBrandTest() throws ApiException {
        UUID id = null;
        BrandsIdBody brandsIdBody = null;
        api.replaceBrand(id, brandsIdBody);

        // TODO: test validations
    }
    
    /**
     * Partially update a brand
     *
     * Update an existing brand.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateBrandTest() throws ApiException {
        UUID id = null;
        BrandsIdBody1 brandsIdBody1 = null;
        api.updateBrand(id, brandsIdBody1);

        // TODO: test validations
    }
    
}
