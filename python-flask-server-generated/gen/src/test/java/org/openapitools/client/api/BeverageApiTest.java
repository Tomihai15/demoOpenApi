/*
 * Beverage E-commerce API
 * API for managing beverages, labels, ingredients, container types, and unit measures in a beverage e-commerce platform.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.Beverage;
import org.openapitools.client.model.BeveragesBody;
import org.openapitools.client.model.BeveragesIdBody;
import org.openapitools.client.model.BeveragesIdBody1;
import org.openapitools.client.model.ErrorResponse;
import org.openapitools.client.model.InlineResponse200;
import java.util.UUID;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for BeverageApi
 */
@Ignore
public class BeverageApiTest {

    private final BeverageApi api = new BeverageApi();

    
    /**
     * Create a new beverage
     *
     * Creates a new beverage.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createBeverageTest() throws ApiException {
        BeveragesBody beveragesBody = null;
        api.createBeverage(beveragesBody);

        // TODO: test validations
    }
    
    /**
     * Delete a beverage
     *
     * Deletes a beverage.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteBeverageTest() throws ApiException {
        UUID id = null;
        api.deleteBeverage(id);

        // TODO: test validations
    }
    
    /**
     * Retrieve a beverage by ID
     *
     * Retrieves details of a specific beverage.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getBeverageByIdTest() throws ApiException {
        UUID id = null;
        Beverage response = api.getBeverageById(id);

        // TODO: test validations
    }
    
    /**
     * Retrieve all beverages
     *
     * Retrieves a list of all beverages.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getBeveragesTest() throws ApiException {
        Integer page = null;
        Integer perPage = null;
        InlineResponse200 response = api.getBeverages(page, perPage);

        // TODO: test validations
    }
    
    /**
     * Update a beverage
     *
     * Create or Replace an existing beverage.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void replaceBeverageTest() throws ApiException {
        UUID id = null;
        BeveragesIdBody beveragesIdBody = null;
        api.replaceBeverage(id, beveragesIdBody);

        // TODO: test validations
    }
    
    /**
     * Partially update a beverage
     *
     * Update an existing beverage.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateBeverageTest() throws ApiException {
        UUID id = null;
        BeveragesIdBody1 beveragesIdBody1 = null;
        api.updateBeverage(id, beveragesIdBody1);

        // TODO: test validations
    }
    
}
