/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.36).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package com.example.demo.generated.api;

import com.example.demo.generated.model.ErrorResponse;
import com.example.demo.generated.model.Ingredient;
import com.example.demo.generated.model.IngredientsBody;
import com.example.demo.generated.model.IngredientsIdBody;
import com.example.demo.generated.model.IngredientsIdBody1;
import com.example.demo.generated.model.InlineResponse2003;
import com.example.demo.generated.model.InlineResponse201;
import java.util.UUID;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.responses.ApiResponses;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;

import javax.validation.Valid;

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.SpringCodegen", date = "2024-10-23T23:06:47.905007700+03:00[Europe/Bucharest]")
@Validated
public interface IngredientsApi {

    @Operation(summary = "Create a new ingredient", description = "Creates a new ingredient.", security = {
        @SecurityRequirement(name = "BearerAuth")    }, tags={ "ingredient" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "201", description = "Ingredient created successfully.", content = @Content(mediaType = "application/json", schema = @Schema(implementation = InlineResponse201.class))),
        
        @ApiResponse(responseCode = "400", description = "Invalid request.", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))),
        
        @ApiResponse(responseCode = "401", description = "Authentication failed.", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))),
        
        @ApiResponse(responseCode = "403", description = "Access forbidden.", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))) })
    @RequestMapping(value = "/ingredients",
        produces = { "application/json" }, 
        consumes = { "application/json" }, 
        method = RequestMethod.POST)
    ResponseEntity<InlineResponse201> createIngredient(@Parameter(in = ParameterIn.DEFAULT, description = "", required=true, schema=@Schema()) @Valid @RequestBody IngredientsBody body);


    @Operation(summary = "Delete an ingredient", description = "Deletes an ingredient.", security = {
        @SecurityRequirement(name = "BearerAuth")    }, tags={ "ingredient" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "204", description = "Ingredient deleted successfully."),
        
        @ApiResponse(responseCode = "401", description = "Authentication failed.", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))),
        
        @ApiResponse(responseCode = "403", description = "Access forbidden.", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))),
        
        @ApiResponse(responseCode = "404", description = "Resource not found.", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))) })
    @RequestMapping(value = "/ingredients/{id}",
        produces = { "application/json" }, 
        method = RequestMethod.DELETE)
    ResponseEntity<Void> deleteIngredient(@Parameter(in = ParameterIn.PATH, description = "Unique identifier for the ingredient.", required=true, schema=@Schema()) @PathVariable("id") UUID id);


    @Operation(summary = "Retrieve an ingredient by ID", description = "Retrieves details of a specific ingredient.", security = {
        @SecurityRequirement(name = "BearerAuth")    }, tags={ "ingredient" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Ingredient details.", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Ingredient.class))),
        
        @ApiResponse(responseCode = "401", description = "Authentication failed.", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))),
        
        @ApiResponse(responseCode = "404", description = "Resource not found.", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))) })
    @RequestMapping(value = "/ingredients/{id}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<Ingredient> getIngredientById(@Parameter(in = ParameterIn.PATH, description = "Unique identifier for the ingredient.", required=true, schema=@Schema()) @PathVariable("id") UUID id);


    @Operation(summary = "Retrieve all ingredients", description = "Retrieves a list of all ingredients.", security = {
        @SecurityRequirement(name = "BearerAuth")    }, tags={ "ingredient" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "A list of ingredients.", content = @Content(mediaType = "application/json", schema = @Schema(implementation = InlineResponse2003.class))),
        
        @ApiResponse(responseCode = "401", description = "Authentication failed.", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))) })
    @RequestMapping(value = "/ingredients",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<InlineResponse2003> getIngredients();


    @Operation(summary = "Update an ingredient", description = "Create or Replace an existing ingredient.", security = {
        @SecurityRequirement(name = "BearerAuth")    }, tags={ "ingredient" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Ingredient updated successfully.", content = @Content(mediaType = "application/json", schema = @Schema(implementation = InlineResponse201.class))),
        
        @ApiResponse(responseCode = "400", description = "Invalid request.", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))),
        
        @ApiResponse(responseCode = "401", description = "Authentication failed.", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))),
        
        @ApiResponse(responseCode = "403", description = "Access forbidden.", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))),
        
        @ApiResponse(responseCode = "404", description = "Resource not found.", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))) })
    @RequestMapping(value = "/ingredients/{id}",
        produces = { "application/json" }, 
        consumes = { "application/json" }, 
        method = RequestMethod.PUT)
    ResponseEntity<InlineResponse201> replaceIngredient(@Parameter(in = ParameterIn.PATH, description = "Unique identifier for the ingredient.", required=true, schema=@Schema()) @PathVariable("id") UUID id, @Parameter(in = ParameterIn.DEFAULT, description = "", required=true, schema=@Schema()) @Valid @RequestBody IngredientsIdBody body);


    @Operation(summary = "Update an ingredient", description = "Updates an existing ingredient.", security = {
        @SecurityRequirement(name = "BearerAuth")    }, tags={ "ingredient" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Ingredient updated successfully.", content = @Content(mediaType = "application/json", schema = @Schema(implementation = InlineResponse201.class))),
        
        @ApiResponse(responseCode = "400", description = "Invalid request.", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))),
        
        @ApiResponse(responseCode = "401", description = "Authentication failed.", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))),
        
        @ApiResponse(responseCode = "403", description = "Access forbidden.", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))),
        
        @ApiResponse(responseCode = "404", description = "Resource not found.", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))) })
    @RequestMapping(value = "/ingredients/{id}",
        produces = { "application/json" }, 
        consumes = { "application/json" }, 
        method = RequestMethod.PATCH)
    ResponseEntity<InlineResponse201> updateIngredient(@Parameter(in = ParameterIn.PATH, description = "Unique identifier for the ingredient.", required=true, schema=@Schema()) @PathVariable("id") UUID id, @Parameter(in = ParameterIn.DEFAULT, description = "", required=true, schema=@Schema()) @Valid @RequestBody IngredientsIdBody1 body);

}

