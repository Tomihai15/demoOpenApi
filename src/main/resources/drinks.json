{
  "openapi": "3.0.0",
  "info": {
    "version": "1.0.0",
    "title": "Drinks Distributor",
    "description": "A sample API that uses a beverages company as an example to demonstrate features in the OpenAPI 3.0 specification",
    "termsOfService": "http://swagger.io/terms/",
    "contact": {
      "name": "MISS2",
      "email": "miss@example.com",
      "url": "http://localhost:8080"
    },
    "license": {
      "name": "Apache 2.0",
      "url": "https://www.apache.org/licenses/LICENSE-2.0.html"
    }
  },
  "servers": [
    {
      "url": "https://drinks.swagger.io/v2"
    }
  ],
  "tags": [
    {
      "name": "user",
      "description": "Operations related to user management"
    },
    {
      "name": "beverage",
      "description": "Operations related to beverages"
    },
    {
      "name": "label",
      "description": "Operations related to labels"
    },
    {
      "name": "brand",
      "description": "Operations related to brands"
    },
    {
      "name": "container",
      "description": "Operations related to containers"
    },
    {
      "name": "unit",
      "description": "Operations related to units"
    },
    {
      "name": "ingredient",
      "description": "Operations related to ingredients"
    }
  ],
  "paths": {
    "/user/login": {
      "post": {
        "tags": ["user"],
        "summary": "Logs in a user",
        "description": "Verifies if the user credentials are valid. If positive, it creates and returns a JWT",
        "operationId": "userLogin",
        "requestBody": {
          "description": "User Credentials",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/userLoginDTO"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful login",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "token": {
                      "type": "string",
                      "description": "JWT token for authentication"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "examples": {
                  "invalidData": {
                    "summary": "Invalid data provided",
                    "value": {
                      "message": "Invalid email or password format"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized access"
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "examples": {
                  "serverError": {
                    "summary": "Unexpected server error",
                    "value": {
                      "message": "An unexpected error occurred on the server"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },

    "/beverages": {
      "get": {
        "tags": ["beverage"],
        "summary": "Returns a list of all beverages",
        "operationId": "getBeverages",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "The page number to retrieve",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "size",
            "in": "query",
            "description": "The number of items per page",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }

        ],
        "responses": {

          "200": {
            "description": "List of beverages",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Beverage"
                  }
                }
              }
            }
          },

          "400": {
            "description": "Invalid request"
          },

          "default": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["beverage"],
        "summary": "Creates a new beverage",
        "operationId": "createBeverage",
        "requestBody": {
          "description": "New beverage details",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NewBeverage"
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "201": {
            "description": "Beverage created successfully",
            "headers": {
              "Location": {
                "description": "URL of the newly created beverage",
                "schema": {
                  "type": "string",
                  "format": "uri"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request"
          },
          "401": {
            "description": "Unauthorized access"
          },
          "default": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": ["beverage"],
        "summary": "Create or replace a beverage",
        "operationId": "putBeverage",
        "requestBody": {
          "description": "Beverage to update",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Beverage"
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {

          "200": {
              "description": "Beverages updated successfully"
          },

          "201": {
            "description": "Beverage created successfully",
            "headers": {
              "Location": {
                "description": "URL of the newly created beverage",
                "schema": {
                  "type": "string",
                  "format": "uri"
                }
              }
            }
          },

          "400": {
            "description": "Invalid request"
          },

          "401": {
            "description": "Unauthorized access"
          },

          "default": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }

        }
      }

    },
    
    "/beverages/{id}": {

      "get": {
        "tags": ["beverage"],
        "summary": "Returns a beverage by its ID",
        "operationId": "getBeverageById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the beverage to retrieve",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Beverage found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Beverage"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request"
          },
          "404": {
            "description": "Beverage not found"
          },
          "default": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": ["beverage"],
        "summary": "Partially updates an existing beverage",
        "operationId": "patchBeverage",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the beverage to update",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "description": "Partial beverage details",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NewBeverage"
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Beverage updated successfully"
          },
          "400": {
            "description": "Invalid request"
          },
          "401": {
            "description": "Unauthorized access"
          },
          "404": {
            "description": "Beverage not found"
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": ["beverage"],
        "summary": "Deletes an existing beverage",
        "operationId": "deleteBeverage",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the beverage to delete",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Beverage deleted successfully"
          },
          "400": {
            "description": "Invalid request"
          },
          "401": {
            "description": "Unauthorized access"
          },
          "404": {
            "description": "Beverage not found"
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }

    },
    
    "/labels": {
      "get": {
        "tags": ["label"],
        "summary": "Returns a list of all labels",
        "operationId": "getLabels",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "The page number to retrieve",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "size",
            "in": "query",
            "description": "The number of items per page",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }

        ],
        "responses": {

          "200": {
            "description": "List of labels",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Label"
                  }
                }
              }
            }
          },

          "400": {
            "description": "Invalid request"
          },

          "default": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["label"],
        "summary": "Creates a new label",
        "operationId": "createLabel",
        "requestBody": {
          "description": "New Label details",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NewLabel"
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "201": {
            "description": "Label created successfully",
            "headers": {
              "Location": {
                "description": "URL of the newly created label",
                "schema": {
                  "type": "string",
                  "format": "uri"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request"
          },
          "401": {
            "description": "Unauthorized access"
          },
          "default": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": ["label"],
        "summary": "Create or replace a label",
        "operationId": "putLabel",
        "requestBody": {
          "description": "Label to update",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Label"
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {

          "200": {
            "description": "Beverages updated successfully"
          },

          "201": {
            "description": "Beverage created successfully",
            "headers": {
              "Location": {
                "description": "URL of the newly created beverage",
                "schema": {
                  "type": "string",
                  "format": "uri"
                }
              }
            }
          },

          "400": {
            "description": "Invalid request"
          },

          "401": {
            "description": "Unauthorized access"
          },

          "default": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }

        }
      }
    },

    "/labels/{id}": {

      "get": {
        "tags": ["label"],
        "summary": "Returns a label by its ID",
        "operationId": "getLabelById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the label to retrieve",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Label found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Label"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request"
          },
          "404": {
            "description": "Label not found"
          },
          "default": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": ["label"],
        "summary": "Partially updates an existing label",
        "operationId": "patchLabel",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the label to update",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "description": "Partial label details",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NewLabel"
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Label updated successfully"
          },
          "400": {
            "description": "Invalid request"
          },
          "401": {
            "description": "Unauthorized access"
          },
          "404": {
            "description": "Label not found"
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": ["label"],
        "summary": "Deletes an existing label",
        "operationId": "deleteLabel",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the label to delete",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Label deleted successfully"
          },
          "400": {
            "description": "Invalid request"
          },
          "401": {
            "description": "Unauthorized access"
          },
          "404": {
            "description": "Label not found"
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }

    },

    "/brands": {

      "get": {
        "tags": ["brand"],
        "summary": "Returns a list of all brands",
        "operationId": "getBrands",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "The page number to retrieve",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "size",
            "in": "query",
            "description": "The number of items per page",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }

        ],
        "responses": {

          "200": {
            "description": "List of brands",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Brand"
                  }
                }
              }
            }
          },

          "400": {
            "description": "Invalid request"
          },

          "default": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["brand"],
        "summary": "Creates a new Brand",
        "operationId": "createBrand",
        "requestBody": {
          "description": "New brands details",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NewBrand"
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "201": {
            "description": "Brand created successfully",
            "headers": {
              "Location": {
                "description": "URL of the newly created brand",
                "schema": {
                  "type": "string",
                  "format": "uri"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request"
          },
          "401": {
            "description": "Unauthorized access"
          },
          "default": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": ["brand"],
        "summary": "Create or replace a brand",
        "operationId": "putBrand",
        "requestBody": {
          "description": "Brand to update",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Brand"
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {

          "200": {
            "description": "Beverages updated successfully"
          },

          "201": {
            "description": "Beverage created successfully",
            "headers": {
              "Location": {
                "description": "URL of the newly created beverage",
                "schema": {
                  "type": "string",
                  "format": "uri"
                }
              }
            }
          },

          "400": {
            "description": "Invalid request"
          },

          "401": {
            "description": "Unauthorized access"
          },

          "default": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }

        }
      }
    },

    "/brands/{id}": {

      "get": {
        "tags": ["brand"],
        "summary": "Returns a brand by its ID",
        "operationId": "getBrandById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the brand to retrieve",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Brand found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Brand"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request"
          },
          "404": {
            "description": "Brand not found"
          },
          "default": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": ["brand"],
        "summary": "Partially updates an existing brand",
        "operationId": "patchBrand",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the brand to update",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "description": "Partial brand details",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NewBrand"
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Brand updated successfully"
          },
          "400": {
            "description": "Invalid request"
          },
          "401": {
            "description": "Unauthorized access"
          },
          "404": {
            "description": "Brand not found"
          },
          "default": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": ["brand"],
        "summary": "Deletes an existing brand",
        "operationId": "deleteBrand",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the brand to delete",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Brand deleted successfully"
          },
          "400": {
            "description": "Invalid request"
          },
          "401": {
            "description": "Unauthorized access"
          },
          "404": {
            "description": "Brand not found"
          },
          "default": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }

    },

    "/containers": {

      "get": {
        "tags": ["container"],
        "summary": "Returns a list of all container",
        "operationId": "getContainers",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "The page number to retrieve",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "size",
            "in": "query",
            "description": "The number of items per page",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }

        ],
        "responses": {

          "200": {
            "description": "List of containers",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Container"
                  }
                }
              }
            }
          },

          "400": {
            "description": "Invalid request"
          },

          "default": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["container"],
        "summary": "Creates a new container",
        "operationId": "createContainer",
        "requestBody": {
          "description": "New container details",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NewContainer"
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "201": {
            "description": "Container created successfully",
            "headers": {
              "Location": {
                "description": "URL of the newly created container",
                "schema": {
                  "type": "string",
                  "format": "uri"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request"
          },
          "401": {
            "description": "Unauthorized access"
          },
          "default": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": ["container"],
        "summary": "Create or replace a container",
        "operationId": "putContainer",
        "requestBody": {
          "description": "Container to update",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Container"
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {

          "200": {
            "description": "Container updated successfully"
          },

          "201": {
            "description": "Container created successfully",
            "headers": {
              "Location": {
                "description": "URL of the newly created container",
                "schema": {
                  "type": "string",
                  "format": "uri"
                }
              }
            }
          },

          "400": {
            "description": "Invalid request"
          },

          "401": {
            "description": "Unauthorized access"
          },

          "default": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }

        }
      },

    },

    "/containers/{id}": {

      "get": {
        "responses": {

        }
      },

      "put": {
        "responses": {

        }
      },

      "patch": {
        "responses": {

        }
      },

      "delete": {
        "responses": {

        }
      }

    },

    "/units": {

      "get": {
        "responses": {

        }
      },

      "post": {
        "responses": {

        }
      }

    },

    "/units/{id}": {

      "get": {
        "responses": {

        }
      },

      "put": {
        "responses": {

        }
      },

      "patch": {
        "responses": {

        }
      },

      "delete": {
        "responses": {

        }
      }
    },

    "/beverage/ingredients": {

      "get": {
        "responses": {

        }
      },

      "post": {
        "responses": {

        }
      }
    },

    "/beverage/ingredients/{id}": {

      "get": {
        "responses": {

        }
      },

      "put": {
        "responses": {

        }
      },

      "patch": {
        "responses": {

        }
      },

      "delete": {
        "responses": {

        }
      }

    },

    "/ingredients/": {

      "get": {
        "responses": {

        }
      },

      "post": {
        "responses": {

        }
      }
    },

    "/ingredients/{id}": {

      "get": {
        "responses": {

        }
      },

      "put": {
        "responses": {

        }
      },

      "patch": {
        "responses": {

        }
      },

      "delete": {
        "responses": {

        }
      }

    }
  },

  "components": {
    "schemas": {
      "userLoginDTO": {
        "type": "object",
        "required": [
          "email", "password"
        ],
        "properties": {
          "email": {
            "type": "string",
            "format": "email"
          },
          "password": {
            "type": "string",
            "format": "password"
          }
        }
      },
      "Beverage": {
        "allOf": [
          {
            "$ref": "#/components/schemas/NewBeverage"
          },
          {
            "type": "object",
            "required": [
              "id"
            ],
            "properties": {
              "id": {
                "type": "integer",
                "format": "int64"
              }
            }
          }
        ]
      },
      "NewBeverage": {
        "type": "object",
        "required": [

        ],
        "properties": {

        }
      },
      "Label": {
        "allOf": [
          {
            "$ref": "#/components/schemas/NewLabel"
          },
          {
            "type": "object",
            "required": [
              "id"
            ],
            "properties": {
              "id": {
                "type": "integer",
                "format": "int64"
              }
            }
          }
        ]
      },
      "NewLabel": {
        "type": "object",
        "required": [

        ],
        "properties": {

        }
      },
      "Brand": {
        "allOf": [
          {
            "$ref": "#/components/schemas/NewBrand"
          },
          {
            "type": "object",
            "required": [
              "id"
            ],
            "properties": {
              "id": {
                "type": "integer",
                "format": "int64"
              }
            }
          }
        ]
      },
      "NewBrand": {
        "type": "object",
        "required": [

        ],
        "properties": {

        }
      },
      "Container": {
        "allOf": [
          {
            "$ref": "#/components/schemas/NewContainer"
          },
          {
            "type": "object",
            "required": [
              "id"
            ],
            "properties": {
              "id": {
                "type": "integer",
                "format": "int64"
              }
            }
          }
        ]
      },
      "NewContainer": {
        "type": "object",
        "required": [

        ],
        "properties": {

        }
      },
      "Error": {
        "type": "object",
        "required": [
          "message"
        ],
        "properties": {
          "message": {
            "type": "string"
          }
        }
      }

    }
  }
}