{
  "openapi": "3.0.0",
  "info": {
    "version": "1.0.0",
    "title": "Drinks Distributor",
    "description": "A sample API that uses a beverages company as an example to demonstrate features in the OpenAPI 3.0 specification",
    "termsOfService": "http://swagger.io/terms/",
    "contact": {
      "name": "MISS2",
      "email": "miss@example.com",
      "url": "http://localhost:8080"
    },
    "license": {
      "name": "Apache 2.0",
      "url": "https://www.apache.org/licenses/LICENSE-2.0.html"
    }
  },
  "servers": [
    {
      "url": "https://drinks.swagger.io/v2"
    }
  ],
  "paths": {
    "/user/login": {
      "post": {
        "description": "Verifies if the user credentials are valid. If positive, it creates and returns a JWT",
        "operationId": "userLogin",
        "requestBody": {
          "description": "User Credentials",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/userLoginDTO"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful login",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "token": {
                      "type": "string",
                      "description": "JWT token for authentication"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "Error message explaining the problem"
                    }
                  }
                },
                "examples": {
                  "invalidData": {
                    "summary": "Invalid data provided",
                    "value": {
                      "error": "Invalid email or password format"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized access",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "Authentication failed"
                    }
                  }
                },
                "examples": {
                  "unauthorized": {
                    "summary": "Invalid credentials",
                    "value": {
                      "error": "Invalid username or password"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden access",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "Error message explaining why access is forbidden"
                    }
                  }
                },
                "examples": {
                  "forbiddenAccess": {
                    "summary": "Access to the resource is forbidden",
                    "value": {
                      "error": "You do not have permission to access this resource"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "Error message indicating a server-side failure"
                    }
                  }
                },
                "examples": {
                  "serverError": {
                    "summary": "Unexpected server error",
                    "value": {
                      "error": "An unexpected error occurred on the server"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },

    "/beverages": {
      "get": {
        "description": "",
        "operationId": "",
        "parameters": [],
        "responses": {}
      },

      "post": {
        "description": "",
        "operationId": "",
        "requestBody": {
          "description": "",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": ""
              }
            }
          }
        },
        "responses": {}
      }

    },
    
    "/beverages/{id}": {

      "get": {
        "responses": {
          
        }
      },

      "put": {
        "responses": {

        }
      },

      "patch": {
        "responses": {

        }
      },
      
      "delete": {
        "responses": {

        }
      }
    },
    
    "/labels": {
      "get": {
        "responses": {

        }
      },

      "post": {
        "responses": {

        }
      }
    },

    "/labels/{id}": {

      "get": {
        "responses": {

        }
      },

      "put": {
        "responses": {

        }
      },

      "patch": {
        "responses": {

        }
      },

      "delete": {
        "responses": {

        }
      }

    },

    "/brands": {

      "get": {
        "responses": {

        }
      },

      "post": {
        "responses": {

        }
      }
    },

    "/brands/{id}": {

      "get": {
        "responses": {

        }
      },

      "put": {
        "responses": {

        }
      },

      "patch": {
        "responses": {

        }
      },

      "delete": {
        "responses": {

        }
      }

    },

    "/containers": {

      "get": {
        "responses": {

        }
      },

      "post": {
        "responses": {

        }
      }
    },

    "/containers/{id}": {

      "get": {
        "responses": {

        }
      },

      "put": {
        "responses": {

        }
      },

      "patch": {
        "responses": {

        }
      },

      "delete": {
        "responses": {

        }
      }

    },

    "/units": {

      "get": {
        "responses": {

        }
      },

      "post": {
        "responses": {

        }
      }

    },

    "/units/{id}": {

      "get": {
        "responses": {

        }
      },

      "put": {
        "responses": {

        }
      },

      "patch": {
        "responses": {

        }
      },

      "delete": {
        "responses": {

        }
      }
    },

    "/beverage/ingredients": {

      "get": {
        "responses": {

        }
      },

      "post": {
        "responses": {

        }
      }
    },

    "/beverage/ingredients/{id}": {

      "get": {
        "responses": {

        }
      },

      "put": {
        "responses": {

        }
      },

      "patch": {
        "responses": {

        }
      },

      "delete": {
        "responses": {

        }
      }

    },

    "/ingredients/": {

      "get": {
        "responses": {

        }
      },

      "post": {
        "responses": {

        }
      }
    },

    "/ingredients/{id}": {

      "get": {
        "responses": {

        }
      },

      "put": {
        "responses": {

        }
      },

      "patch": {
        "responses": {

        }
      },

      "delete": {
        "responses": {

        }
      }

    }
  },

  "components": {
    "schemas": {
      "userLoginDTO": {
        "type": "object",
        "required": [
          "email", "password"
        ],
        "properties": {
          "email": {
            "type": "string",
            "format": "email"
          },
          "password": {
            "type": "string",
            "format": "password"
          }
        }
      },
      "Beverage": {
        "allOf": [
          {
            "$ref": "#/components/schemas/NewBeverage"
          },
          {
            "type": "object",
            "required": [
              "id"
            ],
            "properties": {
              "id": {
                "type": "integer",
                "format": "int64"
              }
            }
          }
        ]
      },
      "NewBeverage": {
        "type": "object",
        "required": [

        ],
        "properties": {

        }
      }

    }
  }
}