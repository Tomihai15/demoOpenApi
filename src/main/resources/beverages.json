{
  "openapi": "3.0.0",
  "info": {
    "title": "Beverage E-commerce API",
    "version": "1.0.0",
    "description": "API for managing beverages, labels, ingredients, container types, and unit measures in a beverage e-commerce platform."
  },
  "servers": [
    {
      "url": "https://api.beverage-ecommerce.com/v1"
    }
  ],
  "security": [
    {
      "BearerAuth": []
    }
  ],
  "paths": {
    "/beverages": {
      "get": {
        "summary": "Retrieve all beverages",
        "description": "Retrieves a list of all beverages.",
        "operationId": "getBeverages",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "integer",
              "default": 1,
              "minimum": 1
            },
            "description": "Page number."
          },
          {
            "in": "query",
            "name": "per_page",
            "schema": {
              "type": "integer",
              "default": 10,
              "minimum": 1,
              "maximum": 50
            },
            "description": "Number of items per page."
          }
        ],
        "responses": {
          "200": {
            "description": "A list of beverages.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "beverages": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Beverage"
                      }
                    },
                    "links": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/HateoasLink"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      },
      "post": {
        "summary": "Create a new beverage",
        "description": "Creates a new beverage.",
        "operationId": "createBeverage",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string"
                  },
                  "description": {
                    "type": "string"
                  },
                  "price": {
                    "type": "number",
                    "format": "float"
                  },
                  "label_id": {
                    "type": "string",
                    "format": "uuid"
                  },
                  "container_type_id": {
                    "type": "string",
                    "format": "uuid"
                  },
                  "unit_measure_id": {
                    "type": "string",
                    "format": "uuid"
                  },
                  "ingredients": {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "format": "uuid"
                    }
                  }
                },
                "required": [
                  "name",
                  "price",
                  "label_id",
                  "container_type_id",
                  "unit_measure_id"
                ]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Beverage created successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "format": "uuid"
                    },
                    "links": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/HateoasLink"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequestError"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      }
    },
    "/beverages/{id}": {
      "get": {
        "summary": "Retrieve a beverage by ID",
        "description": "Retrieves details of a specific beverage.",
        "operationId": "getBeverageById",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": "Unique identifier for the beverage."
          }
        ],
        "responses": {
          "200": {
            "description": "Beverage details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Beverage"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      },
      "put": {
        "summary": "Update a beverage",
        "description": "Updates an existing beverage.",
        "operationId": "updateBeverage",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": "Unique identifier for the beverage."
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string"
                  },
                  "description": {
                    "type": "string"
                  },
                  "price": {
                    "type": "number",
                    "format": "float"
                  },
                  "label_id": {
                    "type": "string",
                    "format": "uuid"
                  },
                  "container_type_id": {
                    "type": "string",
                    "format": "uuid"
                  },
                  "unit_measure_id": {
                    "type": "string",
                    "format": "uuid"
                  },
                  "ingredients": {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "format": "uuid"
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Beverage updated successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "format": "uuid"
                    },
                    "links": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/HateoasLink"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequestError"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      },
      "delete": {
        "summary": "Delete a beverage",
        "description": "Deletes a beverage.",
        "operationId": "deleteBeverage",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": "Unique identifier for the beverage."
          }
        ],
        "responses": {
          "204": {
            "description": "Beverage deleted successfully."
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      }
    },
    "/labels": {
      "get": {
        "summary": "Retrieve all labels",
        "description": "Retrieves a list of all labels.",
        "operationId": "getLabels",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "A list of labels.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "labels": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Label"
                      }
                    },
                    "links": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/HateoasLink"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      },
      "post": {
        "summary": "Create a new label",
        "description": "Creates a new label.",
        "operationId": "createLabel",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string"
                  },
                  "description": {
                    "type": "string"
                  }
                },
                "required": [
                  "name"
                ]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Label created successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "format": "uuid"
                    },
                    "links": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/HateoasLink"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequestError"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      }
    },
    "/labels/{id}": {
      "get": {
        "summary": "Retrieve a label by ID",
        "description": "Retrieves details of a specific label.",
        "operationId": "getLabelById",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": "Unique identifier for the label."
          }
        ],
        "responses": {
          "200": {
            "description": "Label details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Label"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      },
      "put": {
        "summary": "Update a label",
        "description": "Updates an existing label.",
        "operationId": "updateLabel",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": "Unique identifier for the label."
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string"
                  },
                  "description": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Label updated successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "format": "uuid"
                    },
                    "links": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/HateoasLink"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequestError"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      },
      "delete": {
        "summary": "Delete a label",
        "description": "Deletes a label.",
        "operationId": "deleteLabel",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": "Unique identifier for the label."
          }
        ],
        "responses": {
          "204": {
            "description": "Label deleted successfully."
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      }
    },
    "/ingredients": {
      "get": {
        "summary": "Retrieve all ingredients",
        "description": "Retrieves a list of all ingredients.",
        "operationId": "getIngredients",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "A list of ingredients.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "ingredients": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Ingredient"
                      }
                    },
                    "links": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/HateoasLink"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      },
      "post": {
        "summary": "Create a new ingredient",
        "description": "Creates a new ingredient.",
        "operationId": "createIngredient",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string"
                  },
                  "allergen_info": {
                    "type": "string"
                  }
                },
                "required": [
                  "name"
                ]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Ingredient created successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "format": "uuid"
                    },
                    "links": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/HateoasLink"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequestError"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      }
    },
    "/ingredients/{id}": {
      "get": {
        "summary": "Retrieve an ingredient by ID",
        "description": "Retrieves details of a specific ingredient.",
        "operationId": "getIngredientById",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": "Unique identifier for the ingredient."
          }
        ],
        "responses": {
          "200": {
            "description": "Ingredient details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Ingredient"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      },
      "put": {
        "summary": "Update an ingredient",
        "description": "Updates an existing ingredient.",
        "operationId": "updateIngredient",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": "Unique identifier for the ingredient."
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string"
                  },
                  "allergen_info": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Ingredient updated successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "format": "uuid"
                    },
                    "links": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/HateoasLink"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequestError"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      },
      "delete": {
        "summary": "Delete an ingredient",
        "description": "Deletes an ingredient.",
        "operationId": "deleteIngredient",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": "Unique identifier for the ingredient."
          }
        ],
        "responses": {
          "204": {
            "description": "Ingredient deleted successfully."
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      }
    },
    "/container-types": {
      "get": {
        "summary": "Retrieve all container types",
        "description": "Retrieves a list of all container types.",
        "operationId": "getContainerTypes",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "A list of container types.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "container_types": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ContainerType"
                      }
                    },
                    "links": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/HateoasLink"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      },
      "post": {
        "summary": "Create a new container type",
        "description": "Creates a new container type.",
        "operationId": "createContainerType",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "type": {
                    "type": "string"
                  },
                  "volume": {
                    "type": "number",
                    "format": "float"
                  }
                },
                "required": [
                  "type",
                  "volume"
                ]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Container type created successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "format": "uuid"
                    },
                    "links": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/HateoasLink"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequestError"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      }
    },
    "/container-types/{id}": {
      "get": {
        "summary": "Retrieve a container type by ID",
        "description": "Retrieves details of a specific container type.",
        "operationId": "getContainerTypeById",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": "Unique identifier for the container type."
          }
        ],
        "responses": {
          "200": {
            "description": "Container type details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ContainerType"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      },
      "put": {
        "summary": "Update a container type",
        "description": "Updates an existing container type.",
        "operationId": "updateContainerType",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": "Unique identifier for the container type."
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "type": {
                    "type": "string"
                  },
                  "volume": {
                    "type": "number",
                    "format": "float"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Container type updated successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "format": "uuid"
                    },
                    "links": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/HateoasLink"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequestError"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      },
      "delete": {
        "summary": "Delete a container type",
        "description": "Deletes a container type.",
        "operationId": "deleteContainerType",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": "Unique identifier for the container type."
          }
        ],
        "responses": {
          "204": {
            "description": "Container type deleted successfully."
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      }
    },
    "/unit-measures": {
      "get": {
        "summary": "Retrieve all unit measures",
        "description": "Retrieves a list of all unit measures.",
        "operationId": "getUnitMeasures",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "A list of unit measures.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "unit_measures": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/UnitMeasure"
                      }
                    },
                    "links": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/HateoasLink"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      },
      "post": {
        "summary": "Create a new unit measure",
        "description": "Creates a new unit measure.",
        "operationId": "createUnitMeasure",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "unit": {
                    "type": "string"
                  },
                  "description": {
                    "type": "string"
                  }
                },
                "required": [
                  "unit"
                ]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Unit measure created successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "format": "uuid"
                    },
                    "links": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/HateoasLink"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequestError"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      }
    },
    "/unit-measures/{id}": {
      "get": {
        "summary": "Retrieve a unit measure by ID",
        "description": "Retrieves details of a specific unit measure.",
        "operationId": "getUnitMeasureById",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": "Unique identifier for the unit measure."
          }
        ],
        "responses": {
          "200": {
            "description": "Unit measure details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnitMeasure"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      },
      "put": {
        "summary": "Update a unit measure",
        "description": "Updates an existing unit measure.",
        "operationId": "updateUnitMeasure",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": "Unique identifier for the unit measure."
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "unit": {
                    "type": "string"
                  },
                  "description": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Unit measure updated successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "format": "uuid"
                    },
                    "links": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/HateoasLink"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequestError"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      },
      "delete": {
        "summary": "Delete a unit measure",
        "description": "Deletes a unit measure.",
        "operationId": "deleteUnitMeasure",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": "Unique identifier for the unit measure."
          }
        ],
        "responses": {
          "204": {
            "description": "Unit measure deleted successfully."
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      }
    }
  },
  "components": {
    "securitySchemes": {
      "BearerAuth": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      }
    },
    "schemas": {
      "Beverage": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "description": "Unique identifier for the beverage."
          },
          "name": {
            "type": "string",
            "description": "Name of the beverage."
          },
          "description": {
            "type": "string",
            "description": "Detailed description of the beverage."
          },
          "price": {
            "type": "number",
            "format": "float",
            "description": "Price of the beverage in USD."
          },
          "label_id": {
            "type": "string",
            "format": "uuid",
            "description": "Unique identifier of the associated label."
          },
          "container_type_id": {
            "type": "string",
            "format": "uuid",
            "description": "Unique identifier of the container type."
          },
          "unit_measure_id": {
            "type": "string",
            "format": "uuid",
            "description": "Unique identifier of the unit measure."
          },
          "ingredients": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            },
            "description": "List of ingredient IDs."
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/HateoasLink"
            }
          }
        },
        "required": [
          "id",
          "name",
          "price",
          "label_id",
          "container_type_id",
          "unit_measure_id"
        ]
      },
      "Label": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "description": "Unique identifier for the label."
          },
          "name": {
            "type": "string",
            "description": "Name of the label."
          },
          "description": {
            "type": "string",
            "description": "Detailed description of the label."
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/HateoasLink"
            }
          }
        },
        "required": [
          "id",
          "name"
        ]
      },
      "Ingredient": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "description": "Unique identifier for the ingredient."
          },
          "name": {
            "type": "string",
            "description": "Name of the ingredient."
          },
          "allergen_info": {
            "type": "string",
            "description": "Allergen information."
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/HateoasLink"
            }
          }
        },
        "required": [
          "id",
          "name"
        ]
      },
      "ContainerType": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "description": "Unique identifier for the container type."
          },
          "type": {
            "type": "string",
            "description": "Type of container (e.g., Bottle, Can)."
          },
          "volume": {
            "type": "number",
            "format": "float",
            "description": "Volume in milliliters."
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/HateoasLink"
            }
          }
        },
        "required": [
          "id",
          "type",
          "volume"
        ]
      },
      "UnitMeasure": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "description": "Unique identifier for the unit measure."
          },
          "unit": {
            "type": "string",
            "description": "Unit of measure (e.g., ml, L)."
          },
          "description": {
            "type": "string",
            "description": "Detailed description of the unit measure."
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/HateoasLink"
            }
          }
        },
        "required": [
          "id",
          "unit"
        ]
      },
      "HateoasLink": {
        "type": "object",
        "properties": {
          "rel": {
            "type": "string",
            "description": "Relationship type (e.g., self, next)."
          },
          "href": {
            "type": "string",
            "description": "Hyperlink reference."
          },
          "method": {
            "type": "string",
            "description": "HTTP method (e.g., GET, POST)."
          }
        },
        "required": [
          "rel",
          "href",
          "method"
        ]
      },
      "ErrorResponse": {
        "type": "object",
        "properties": {
          "error": {
            "type": "object",
            "properties": {
              "code": {
                "type": "integer",
                "format": "int32",
                "description": "HTTP status code."
              },
              "message": {
                "type": "string",
                "description": "Error message."
              },
              "links": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/HateoasLink"
                }
              }
            },
            "required": [
              "code",
              "message"
            ]
          }
        }
      }
    },
    "responses": {
      "UnauthorizedError": {
        "description": "Authentication failed.",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ErrorResponse"
            }
          }
        }
      },
      "BadRequestError": {
        "description": "Invalid request.",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ErrorResponse"
            }
          }
        }
      },
      "NotFoundError": {
        "description": "Resource not found.",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ErrorResponse"
            }
          }
        }
      }
    }
  }
}
